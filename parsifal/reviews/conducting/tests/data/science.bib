@article{Jansen20141508,
title = "Measuring the health of open source software ecosystems: Beyond the scope of project health ",
journal = "Information and Software Technology ",
volume = "56",
number = "11",
pages = "1508 - 1519",
year = "2014",
note = "Special issue on Software Ecosystems ",
issn = "0950-5849",
doi = "http://dx.doi.org/10.1016/j.infsof.2014.04.006",
url = "http://www.sciencedirect.com/science/article/pii/S0950584914000871",
author = "Slinger Jansen",
keywords = "Software ecosystem health",
keywords = "Open source ecosystems",
keywords = "Software repository mining ",
abstract = "AbstractBackground The livelihood of an open source ecosystem is important to different ecosystem participants: software developers, end-users, investors, and participants want to know whether their ecosystem is healthy and performing well. Currently, there exists no working operationalization available that can be used to determine the health of open source ecosystems. Health is typically looked at from a project scope, not from an ecosystem scope. Objectives With such an operationalization, stakeholders can make better decisions on whether to invest in an ecosystem: developers can select the healthiest ecosystem to join, keystone organizers can establish which governance techniques are effective, and end-users can select ecosystems that are robust, will live long, and prosper. Method Design research is used to create the health operationalization. The evaluation step is done using four ecosystem health projects from literature. Results The Open Source Ecosystem Health Operationalization is provided, which establishes the health of a complete software ecosystem, using the data from collections of open source projects that belong to the ecosystem. Conclusion The groundwork is done, by providing a summary of research challenges, for more research in ecosystem health. With the operationalization in hand, researchers no longer need to start from scratch when researching open source ecosystems’ health. "
}
@article{Berger20141520,
title = "Variability mechanisms in software ecosystems ",
journal = "Information and Software Technology ",
volume = "56",
number = "11",
pages = "1520 - 1535",
year = "2014",
note = "Special issue on Software Ecosystems ",
issn = "0950-5849",
doi = "http://dx.doi.org/10.1016/j.infsof.2014.05.005",
url = "http://www.sciencedirect.com/science/article/pii/S0950584914001220",
author = "Thorsten Berger and Rolf-Helge Pfeiffer and Reinhard Tartler and Steffen Dienst and Krzysztof Czarnecki and Andrzej Wąsowski and Steven She",
keywords = "Software ecosystems",
keywords = "Empirical software engineering",
keywords = "Software product lines",
keywords = "Variability management",
keywords = "Mining software repositories ",
abstract = "AbstractContext Software ecosystems are increasingly popular for their economic, strategic, and technical advantages. Application platforms such as Android or iOS allow users to highly customize a system by selecting desired functionality from a large variety of assets. This customization is achieved using variability mechanisms. Objective Variability mechanisms are well-researched in the context of software product lines. Although software ecosystems are often seen as conceptual successors, the technology that sustains their success and growth is much less understood. Our objective is to improve empirical understanding of variability mechanisms used in successful software ecosystems. Method We analyze five ecosystems, ranging from the Linux kernel through Eclipse to Android. A qualitative analysis identifies and characterizes variability mechanisms together with their organizational context. This analysis leads to a conceptual framework that unifies ecosystem-specific aspects using a common terminology. A quantitative analysis investigates scales, growth rates, and—most importantly—dependency structures of the ecosystems. Results In all the studied ecosystems, we identify rich dependency languages and variability descriptions that declare many direct and indirect dependencies. Indirect dependencies to abstract capabilities, as opposed to concrete variability units, are used predominantly in fast-growing ecosystems. We also find that variability models—while providing system-wide abstractions over code—work best in centralized variability management and are, thus, absent in ecosystems with large free markets. These latter ecosystems tend to emphasize maintaining capabilities and common vocabularies, dynamic discovery, and binding with strong encapsulation of contributions, together with uniform distribution channels. Conclusion The use of specialized mechanisms in software ecosystems with large free markets, as opposed to software product lines, calls for recognition of a new discipline—variability encouragement. "
}
@article{Hyrynsalmi2016119,
title = "The influence of developer multi-homing on competition between software ecosystems ",
journal = "Journal of Systems and Software ",
volume = "111",
number = "",
pages = "119 - 127",
year = "2016",
note = "",
issn = "0164-1212",
doi = "http://dx.doi.org/10.1016/j.jss.2015.08.053",
url = "http://www.sciencedirect.com/science/article/pii/S0164121215002010",
author = "Sami Hyrynsalmi and Arho Suominen and Matti Mäntymäki",
keywords = "Software ecosystem",
keywords = "Multi-homing",
keywords = "Two-sided markets ",
abstract = "Abstract Having a large number of applications in the marketplace is considered a critical success factor for software ecosystems. The number of applications has been claimed to determine which ecosystems holds the greatest competitive advantage and will eventually dominate the market. This paper investigates the influence of developer multi-homing (i.e., participating in more than one ecosystem) in three leading mobile application ecosystems. Our results show that when regarded as a whole, mobile application ecosystems are single-homing markets. The results further show that 3% of all developers generate more than 80% of installed applications and that multi-homing is common among these developers. Finally, we demonstrate that the most installed content actually comprises only a small number of the potential value propositions. The results thus imply that attracting and maintaining developers of superstar applications is more critical for the survival of a mobile application ecosystem than the overall number of developers and applications. Hence, the mobile ecosystem is unlikely to become a monopoly. Since exclusive contracts between application developers and mobile application ecosystems are rare, multi-homing is a viable component of risk management and a publishing strategy. The study advances the theoretical understanding of the influence of multi-homing on competition in software ecosystems. "
}

